/*
1. Написать функцию для создания списка. Функция может создавать пустой список, а затем добавлять в него элементы.
2. Написать функцию для печати списка.Функция должна предусматривать вывод сообщения, если список пустой.
3. Написать функции для удаления и добавления элементов списка в соответствии со своим вариантом.
4. Выполнить изменения в списке и печать списка после каждого изменения.
5. Написать функцию для записи списка в файл.
6. Написать функцию для уничтожения списка.
7. Записать список в файл, уничтожить его и выполнить печать (при печати должно быть выдано сообщение "Список пустой").
8. Написать функцию для восстановления списка из файла.
9. Восстановить список и распечатать его.
10. Уничтожить список.

    Вариант 3.
Записи в линейном списке содержат ключевое поле типа int. Сформировать однонаправленный список. Удалить из него К элементов, начиная с заданного номера, добавить элемент перед элементом с заданным номером.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
using namespace std;
struct QueueElem
{
    int data = 0;
    QueueElem* next = nullptr;
};
struct Queue
{
    QueueElem* vivod = nullptr;
    QueueElem* vvod = nullptr;
    int size = 0;
    void push(int data)
    {
        QueueElem* tmp = new QueueElem;
        tmp->data = data;
        tmp->next = nullptr;
        if (size == 0)
        {
            vivod = tmp;
            vvod = tmp;
        }
        else
        {
            vvod->next = tmp;
            vvod = tmp;
        }
        size++;
    }
    int pop()
    {
        int value = vivod->data;
        QueueElem* tmp = vivod;
        if (size == 1) { vvod = nullptr; }
        vivod = vivod->next;
        size--;
        delete tmp;
        return value;
    }
};
void createQueue(Queue& q, int size)
{
    int data;
    for (int i = 1; i <= size; i++)
    {
        cout << "Введите элемент очереди ";
        cin >> data;
        q.push(data);
    }
}
void printQueue(Queue& q)
{
    if (q.size == 0)
    {
        cout << "Очередь пустая." << endl;
        return;
    }
    int tmp, sized = q.size;
    for (int i = 1; i <= sized; i++)
    {
        tmp = q.pop();
        cout << "№" << i << ". " << tmp << endl;
        q.push(tmp);
    }
}
void delElems(Queue& q, int n, int k)
{
    if (q.size == 0)
    {
        cout << "Очередь пустая." << endl;
        return;
    }
    if ((n + k - 1) > q.size)
    {
        cout << "Проверьте правильность введенных данных" << endl;
        return;
    }
    int tmp, sized = q.size;
    for (int i = 1; i <= n-1; i++)
    {
        tmp = q.pop();
        q.push(tmp);
    }
    for (int i = 1; i <= k; i++) q.pop();
    for (int i = 1; i <= sized-(n+k-1); i++)
    {
        tmp = q.pop();
        q.push(tmp);
    }
}
void adder(Queue& q, int n, int k)
{
    if (q.size == 0)
    {
        cout << "Невозможно, так как очередь пустая." << endl;
        return;
    }
    if (n > q.size)
    {
        cout << "Проверьте правильность введенных данных" << endl;
        return;
    }
    int tmp;
    for (int i = 1; i <= n - 1; i++)
    {
        tmp = q.pop();
        q.push(tmp);
    }
    q.push(k);
    int sized = q.size - n;
    for (int i = 1; i <= sized; i++)
    {
        tmp = q.pop();
        q.push(tmp);
    }
}
void killer(Queue& q)
{
    int sized = q.size;
    for (int i = 1; i <= sized; i++) q.pop();
}
void saver(Queue& q)
{
    FILE* f;
    if ((f = fopen("file.bin", "wb")) == NULL) exit(1);
    fwrite(&q.size, sizeof(int), 1, f);
    int tmp, sized = q.size;
    for (int i = 1; i <= sized; i++)
    {
        tmp = q.pop();
        fwrite(&tmp, sizeof(int), 1, f);
        q.push(tmp);
    }
    fclose(f);
}
void uploader(Queue& q)
{
    int tmp, sized;
    FILE* f;
    if ((f = fopen("file.bin", "rb")) == NULL) exit(2);
    fread(&sized, sizeof(int), 1, f);
    for (int i = 1; i <= sized; i++)
    {
        fread(&tmp, sizeof(int), 1, f);
        q.push(tmp);
    }
    fclose(f);
}
int main()
{
    setlocale(LC_ALL, "Russian");
    Queue q;
    int n, k;
    cout << "Введите размер очереди ";
    cin >> n;
    createQueue(q, n);
    printQueue(q);
    cout << "Введите номер элемента в очереди и количество элементов для удаления (элементы удаляются с заданного включительно) ";
    cin >> n;
    cin >> k;
    delElems(q, n, k);
    printQueue(q);
    cout << "Введите номер элемента в очереди перед которым нужно вставить ещё один, и значение вставляемого элемента  ";
    cin >> n;
    cin >> k;
    adder(q, n, k);
    printQueue(q);
    saver(q);
    killer(q);
    printQueue(q);
    uploader(q);
    printQueue(q);
    killer(q);
    printQueue(q);
    return 0;
}
/*
        ТЕСТЫ
1) Консоль:
Введите размер очереди 5
Введите элемент очереди 12
Введите элемент очереди -876
Введите элемент очереди 0
Введите элемент очереди 12
Введите элемент очереди 555
№1. 12
№2. -876
№3. 0
№4. 12
№5. 555
Введите номер элемента в очереди и количество элементов для удаления (элементы удаляются с заданного включительно) 1 2
№1. 0
№2. 12
№3. 555
Введите номер элемента в очереди перед которым нужно вставить ещё один, и значение вставляемого элемента  1 -1
№1. -1
№2. 0
№3. 12
№4. 555
Очередь пустая.
№1. -1
№2. 0
№3. 12
№4. 555
Очередь пустая.


2) Консоль:
Введите размер очереди 6
Введите элемент очереди 123
Введите элемент очереди 987
Введите элемент очереди 267
Введите элемент очереди 8
Введите элемент очереди -654
Введите элемент очереди 222222
№1. 123
№2. 987
№3. 267
№4. 8
№5. -654
№6. 222222
Введите номер элемента в очереди и количество элементов для удаления (элементы удаляются с заданного включительно) 4 3
№1. 123
№2. 987
№3. 267
Введите номер элемента в очереди перед которым нужно вставить ещё один, и значение вставляемого элемента  3 33333
№1. 123
№2. 987
№3. 33333
№4. 267
Очередь пустая.
№1. 123
№2. 987
№3. 33333
№4. 267
Очередь пустая.


3) Консоль:
Введите размер очереди 7
Введите элемент очереди 12
Введите элемент очереди 0
Введите элемент очереди 0
Введите элемент очереди 6666
Введите элемент очереди -643
Введите элемент очереди 98
Введите элемент очереди 34
№1. 12
№2. 0
№3. 0
№4. 6666
№5. -643
№6. 98
№7. 34
Введите номер элемента в очереди и количество элементов для удаления (элементы удаляются с заданного включительно) 2 2
№1. 12
№2. 6666
№3. -643
№4. 98
№5. 34
Введите номер элемента в очереди перед которым нужно вставить ещё один, и значение вставляемого элемента  4 6666
№1. 12
№2. 6666
№3. -643
№4. 6666
№5. 98
№6. 34
Очередь пустая.
№1. 12
№2. 6666
№3. -643
№4. 6666
№5. 98
№6. 34
Очередь пустая.
*/